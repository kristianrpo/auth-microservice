openapi: 3.0.3
info:
  title: Auth Microservice API
  description: API de autenticación y autorización para aplicaciones basadas en microservicios
  version: 1.0.0
  contact:
    name: Kristian Restrepo
    url: https://github.com/kristianrpo
  license:
    name: MIT

servers:
  - url: http://localhost:8080/api/v1
    description: Desarrollo local
  - url: https://auth.yourdomain.com/api/v1
    description: Producción

tags:
  - name: Authentication
    description: Operaciones de autenticación
  - name: Health
    description: Health checks y métricas

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Registrar nuevo usuario
      description: Crea una cuenta de usuario nueva
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Solicitud inválida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Iniciar sesión
      description: Autentica un usuario y devuelve tokens JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Renovar token de acceso
      description: Genera un nuevo token de acceso usando el refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Refresh token inválido o expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Cerrar sesión
      description: Invalida el token actual
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Obtener usuario actual
      description: Retorna la información del usuario autenticado
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Verifica el estado del servicio
      responses:
        '200':
          description: Servicio saludable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /metrics:
    get:
      tags:
        - Health
      summary: Métricas Prometheus
      description: Retorna métricas en formato Prometheus
      responses:
        '200':
          description: Métricas
          content:
            text/plain:
              schema:
                type: string

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          format: email
          example: usuario@ejemplo.com
        password:
          type: string
          format: password
          minLength: 8
          example: Password123!
        name:
          type: string
          example: Usuario Ejemplo

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: usuario@ejemplo.com
        password:
          type: string
          format: password
          example: Password123!

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        token_type:
          type: string
          example: Bearer
        expires_in:
          type: integer
          description: Segundos hasta la expiración
          example: 900

    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: usuario@ejemplo.com
        name:
          type: string
          example: Usuario Ejemplo
        created_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        updated_at:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z

    MessageResponse:
      type: object
      properties:
        message:
          type: string
          example: Operación exitosa

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: Error al procesar la solicitud
        code:
          type: string
          example: INVALID_REQUEST
        details:
          type: string
          example: El campo email es requerido

    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: healthy
        timestamp:
          type: string
          format: date-time
          example: 2024-01-15T10:30:00Z
        version:
          type: string
          example: 1.0.0
        services:
          type: object
          properties:
            database:
              type: string
              example: healthy
            redis:
              type: string
              example: healthy

