basePath: /api/v1
definitions:
  domain.Role:
    enum:
    - USER
    - ADMIN
    type: string
    x-enum-varnames:
    - RoleUser
    - RoleAdmin
  request.ClientCredentialsRequest:
    properties:
      client_id:
        type: string
      client_secret:
        type: string
      grant_type:
        type: string
    required:
    - client_id
    - client_secret
    - grant_type
    type: object
  request.CreateOAuthClientRequest:
    properties:
      client_id:
        minLength: 3
        type: string
      client_secret:
        minLength: 8
        type: string
      description:
        type: string
      name:
        minLength: 3
        type: string
      scopes:
        items:
          type: string
        type: array
    required:
    - client_id
    - client_secret
    - name
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.LogoutRequest:
    properties:
      refresh_token:
        type: string
    type: object
  request.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  request.RegisterRequest:
    properties:
      email:
        type: string
      id_citizen:
        type: integer
      name:
        minLength: 2
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - id_citizen
    - name
    - password
    type: object
  response.ClientCredentialsResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      token_type:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: string
      details:
        type: string
      error:
        type: string
    type: object
  response.HealthResponse:
    properties:
      services:
        additionalProperties:
          type: string
        type: object
      status:
        type: string
      timestamp:
        type: string
      version:
        type: string
    type: object
  response.MessageResponse:
    properties:
      message:
        type: string
    type: object
  response.OAuthClientResponse:
    properties:
      active:
        type: boolean
      client_id:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      scopes:
        items:
          type: string
        type: array
      updated_at:
        type: string
    type: object
  response.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  response.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      id_citizen:
        type: integer
      name:
        type: string
      role:
        $ref: '#/definitions/domain.Role'
      updated_at:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: kristianrpo@example.com
    name: Kristian Rodriguez
    url: https://github.com/kristianrpo
  description: |-
    Authentication and user management service with JWT.
    This microservice provides endpoints for user registration, login, token refresh, and user management.
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: Auth Microservice API
  version: "1.0"
paths:
  /admin/oauth-clients:
    get:
      consumes:
      - application/json
      description: Retrieves all OAuth2 clients. Only administrators can list clients.
      produces:
      - application/json
      responses:
        "200":
          description: List of OAuth clients
          schema:
            items:
              $ref: '#/definitions/response.OAuthClientResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List OAuth2 Clients
      tags:
      - Admin - OAuth Clients
    post:
      consumes:
      - application/json
      description: Creates a new OAuth2 client for service-to-service authentication.
        Only administrators can create clients.
      parameters:
      - description: OAuth Client data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CreateOAuthClientRequest'
      produces:
      - application/json
      responses:
        "201":
          description: OAuth client created successfully
          schema:
            $ref: '#/definitions/response.OAuthClientResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "403":
          description: Forbidden - Admin role required
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: Client already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create OAuth2 Client
      tags:
      - Admin - OAuth Clients
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns access and refresh tokens
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, tokens generated
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Invalid request or missing data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: User login
      tags:
      - Authentication
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Invalidates user tokens (access and refresh)
      parameters:
      - description: Refresh token (optional)
        in: body
        name: request
        schema:
          $ref: '#/definitions/request.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/response.MessageResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: User logout
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the authenticated user's information using the JWT token
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/response.UserResponse'
        "401":
          description: Unauthorized or invalid token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Generate a new token pair using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            $ref: '#/definitions/response.TokenResponse'
        "400":
          description: Invalid request or missing data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid or expired token
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Refresh tokens
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account in the system
      parameters:
      - description: User registration data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Invalid request or missing data
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Register a new user
      tags:
      - Authentication
  /auth/token:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: |-
        Authenticates a client application and returns an access token for service-to-service communication.

        **Test Credentials (use in Swagger):**
        ```json
        {
        "client_id": "123",
        "client_secret": "123",
        "grant_type": "client_credentials"
        }
        ```
      parameters:
      - description: Client Credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ClientCredentialsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Access token generated successfully
          schema:
            $ref: '#/definitions/response.ClientCredentialsResponse'
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "401":
          description: Invalid client credentials
          schema:
            $ref: '#/definitions/response.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: OAuth2 Client Credentials
      tags:
      - OAuth2
  /health:
    get:
      consumes:
      - application/json
      description: Check the health status of the service and its dependencies (database,
        Redis)
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            $ref: '#/definitions/response.HealthResponse'
        "503":
          description: Service is unhealthy
          schema:
            $ref: '#/definitions/response.HealthResponse'
      summary: Complete health check
      tags:
      - Health
  /health/live:
    get:
      consumes:
      - application/json
      description: Check if the service is alive (used by Kubernetes)
      produces:
      - application/json
      responses:
        "200":
          description: Service is alive
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Liveness check
      tags:
      - Health
  /health/ready:
    get:
      consumes:
      - application/json
      description: Check if the service is ready to receive traffic (used by Kubernetes)
      produces:
      - application/json
      responses:
        "200":
          description: Service is ready
          schema:
            additionalProperties:
              type: string
            type: object
        "503":
          description: Service is not ready
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      summary: Readiness check
      tags:
      - Health
securityDefinitions:
  BearerAuth:
    description: 'Type "Bearer <token>" in the field. Example: Bearer eyJhbGciOi...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Endpoints related to authentication and authorization
  name: Authentication
- description: OAuth2 endpoints for service-to-service communication
  name: OAuth2
- description: Admin endpoints for managing OAuth2 clients (requires ADMIN role)
  name: Admin - OAuth Clients
- description: Endpoints for checking the service status
  name: Health
