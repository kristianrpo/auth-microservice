package metrics

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promauto"
)

var (
	httpRequestsTotal = promauto.NewCounterVec(prometheus.CounterOpts{
		Name: "auth_service_http_requests_total",
		Help: "Total number of HTTP requests processed by the auth service",
	}, []string{"method", "endpoint", "status"})

	httpRequestDurationSeconds = promauto.NewHistogramVec(prometheus.HistogramOpts{
		Name:    "auth_service_http_request_duration_seconds",
		Help:    "Duration of HTTP requests processed by the auth service",
		Buckets: prometheus.DefBuckets,
	}, []string{"method", "endpoint"})

	loginRequestsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_login_requests_total",
		Help: "Total number of login requests received",
	})

	registerRequestsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_register_requests_total",
		Help: "Total number of user registration requests received",
	})

	refreshRequestsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_refresh_requests_total",
		Help: "Total number of refresh token requests received",
	})

	logoutRequestsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_logout_requests_total",
		Help: "Total number of logout requests received",
	})

	oauthTokenRequestsTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_oauth_token_requests_total",
		Help: "Total number of OAuth token requests processed",
	})

	jwtTokensGeneratedTotal = promauto.NewCounter(prometheus.CounterOpts{
		Name: "auth_service_jwt_tokens_generated_total",
		Help: "Total number of JWT tokens generated by the service",
	})
)

// ObserveHTTPRequest records the number of HTTP requests and their duration.
func ObserveHTTPRequest(method, endpoint, status string, duration time.Duration) {
	if method == "" {
		method = "UNKNOWN"
	}
	if endpoint == "" {
		endpoint = "unknown"
	}
	if status == "" {
		status = "0"
	}

	httpRequestsTotal.WithLabelValues(method, endpoint, status).Inc()
	httpRequestDurationSeconds.WithLabelValues(method, endpoint).Observe(duration.Seconds())
}

// IncLoginRequests increments the login requests counter.
func IncLoginRequests() {
	loginRequestsTotal.Inc()
}

// IncRegisterRequests increments the register requests counter.
func IncRegisterRequests() {
	registerRequestsTotal.Inc()
}

// IncRefreshRequests increments the refresh requests counter.
func IncRefreshRequests() {
	refreshRequestsTotal.Inc()
}

// IncLogoutRequests increments the logout requests counter.
func IncLogoutRequests() {
	logoutRequestsTotal.Inc()
}

// IncOAuthTokenRequests increments the OAuth token requests counter.
func IncOAuthTokenRequests() {
	oauthTokenRequestsTotal.Inc()
}

// AddJWTTokensGenerated adds the given count to the JWT tokens generated counter.
func AddJWTTokensGenerated(count int) {
	if count <= 0 {
		return
	}
	jwtTokensGeneratedTotal.Add(float64(count))
}
